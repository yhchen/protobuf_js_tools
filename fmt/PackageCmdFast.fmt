{0}{1}
{2}
/**
 * 递归将 “T” 中及其子对象所有属性设置为只读
 * Make all properties recursive in T readonly
 */
type _DeepReadonly<T> = {
    readonly [P in keyof T]: _DeepReadonly<T[P]>;
};

// proto enum type
{6}const enum EMsgType {{7}};

// Proto Msg Check
{6}type IMsgMap = {
{3}
};

// Proto Msg Handler
const _SCHandlerMap = {
{4}
};

{6}const SCHandlerMap = (_SCHandlerMap) as _DeepReadonly<typeof _SCHandlerMap>;

{6}function Encode<T extends keyof IMsgMap>(package_id: T, proto: IMsgMap[T], writer?: protobuf.Writer): Uint8Array|undefined {
    const package_handler = _SCHandlerMap[package_id];
    if (package_handler == null || (<any>package_handler).encode == null) {
        console.error(`Encode Proto failure. package type package_id:[${package_id}] not found.`);
        return undefined;
    }
    try {
        let buffer: protobuf.Writer = (<any>package_handler).encode(proto, writer);
        return buffer.finish();
    } catch (ex) {
        console.error(`Encode package_id:${package_id} failure. error:${ex}`);
    }
    return undefined;
}

{6}function Decode<T extends keyof IMsgMap>(package_id: T, buffer: protobuf.Reader | Uint8Array): IMsgMap[T]|undefined {
    const package_handler = _SCHandlerMap[package_id];
    if (package_handler == null) {
        console.error(`Decode Proto failure. package type package_id:[${package_id}] not found.`);
        return undefined;
    }
    try {
        return <IMsgMap[T]>package_handler.decode(buffer);
    } catch (ex) {
        console.error(`Decode package_id:${package_id} failure. error:${ex}`);
    }
    return undefined;
}

{5}
