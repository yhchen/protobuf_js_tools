{0}{1}
{2}

/**
 * 递归将 “T” 中及其子对象所有属性设置为只读
 * Make all properties recursive in T readonly
 */
type _DeepReadonly<T> = {
    readonly [P in keyof T]: _DeepReadonly<T[P]>;
};

// Proto Msg Check
{8}type IMsgMap = {
{3}
};


// Proto Msg Handler
const _SCHandlerMap = {
{5}
};
{8}const SCHandlerMap = _SCHandlerMap as _DeepReadonly<typeof _SCHandlerMap>;
{8}type TSCHandlerMap = typeof SCHandlerMap;

{8}interface IHandler<T extends keyof IMsgMap, T1 extends keyof IMsgMap[T]> {
    readonly p: T; //           package_name(string)
    readonly m: T1; //          message_name(string)
    readonly sid: number, //    message_id(number)
    readonly pt: any, //        protobuf-static class pointer
};
const _HandlerMap = {
{6}
};
{8}const HandlerMap = _HandlerMap as _DeepReadonly<typeof _HandlerMap>;

{8}function EncodeH<T extends keyof IMsgMap, T1 extends keyof IMsgMap[T]>(_handler: IHandler<T, T1>, proto: IMsgMap[T][T1]): Uint8Array|undefined {
    try {
        if (_handler.pt === null) {
            return null;
        }
        return _handler.pt.encode(proto).finish();
    } catch (ex) {
        console.error(`Encode package_name:${_handler.p} message_name:${_handler.m} failure. error:${ex}`);
    }
    return undefined;
}

{8}function DecodeH<T extends keyof IMsgMap, T1 extends keyof IMsgMap[T]>(_handler: IHandler<T, T1>, buffer: Uint8Array): IMsgMap[T][T1]|undefined {
    try {
        if (_handler.pt === null) {
            return null;
        }
        return _handler.pt.decode(buffer);
    } catch (ex) {
        console.error(`Decode package_name:${_handler.p} message_name:${_handler.m} failure. error:${ex}`);
    }
    return undefined;
}


{8}function EncodeSC<T extends keyof TSCHandlerMap, T1 extends keyof TSCHandlerMap[T]>(package_id: T, message_id: T1, proto: TSCHandlerMap[T][T1]): Uint8Array|undefined {
    const package_handler = SCHandlerMap[package_id];
    if (package_handler == null) {
        console.error(`Encode Proto failure. package type package_id:[${package_id}] message_id:${message_id}] not found.`);
        return undefined;
    }
    const cmd_handler = package_handler[message_id];
    if (cmd_handler === null) {
        return null;
    }
    if (cmd_handler === undefined) {
        console.error(`Encode Proto failure. proto type package_id:[${package_id}] message_id:${message_id}] not found.`);
        return undefined;
    }
    try {
        let buffer: protobuf.Writer = (<any>cmd_handler).encode(proto);
        return buffer.finish();
    } catch (ex) {
        console.error(`Encode package_id:${package_id} message_id:${message_id} failure. error:${ex}`);
    }
    return undefined;
}

{8}function DecodeSC<T extends keyof TSCHandlerMap, T1 extends keyof TSCHandlerMap[T]>(package_id: T, message_id: T1, buffer: Uint8Array): TSCHandlerMap[T][T1]|undefined {
    const package_handler = SCHandlerMap[package_id];
    if (package_handler == null) {
        console.error(`Decode Proto failure. package type package_id:[${package_id}] message_id:${message_id}] not found.`);
        return undefined;
    }
    const cmd_handler = package_handler[message_id];
    if (cmd_handler === undefined) {
        console.error(`Decode Proto failure. proto type package_id:[${package_id}] message_id:${message_id}] not found.`);
        return undefined;
    }
    if (cmd_handler === null) {
        return null;
    }
    try {
        return (<any>cmd_handler).decode(buffer);
    } catch (ex) {
        console.error(`Decode package_id:${package_id} message_id:${message_id} failure. error:${ex}`);
    }
    return undefined;
}

{7}
