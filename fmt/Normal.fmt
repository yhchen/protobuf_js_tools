{0}{1}
{2}

/**
 * 递归将 “T” 中及其子对象所有属性设置为只读
 * Make all properties recursive in T readonly
 */
type _DeepReadonly<T> = {
    readonly [P in keyof T]: _DeepReadonly<T[P]>;
};

// notify type
type INotifyType = _DeepReadonly<{
{3}
}>;

type _DefKeyEnum<T> = {
    [P in keyof T]: P
};

{6}const NotifyType: _DeepReadonly<_DefKeyEnum<INotifyType>> = {
{4}
}

/* // for example useage
 * {6}function RegNotify<T extends keyof typeof NotifyType>(eventType: T, listener:(data: _DeepReadonly<INotifyType[T]>)=>void): void {
 *      eventType;
 *      listener;
 * }
 * // for example useage
 * {6}function DispatchNotify<T extends keyof typeof NotifyType>(eventType: T, data?:_DeepReadonly<INotifyType[T]>): void {
 *      eventType;
 *      data;
 * }
 */

{5}
